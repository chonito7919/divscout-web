# DivScout API Configuration Template
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file to version control

# ==============================================
# Digital Ocean PostgreSQL Database Configuration
# ==============================================

# Database host (usually ends with .db.ondigitalocean.com)
DB_HOST=your-database-cluster.db.ondigitalocean.com

# Database port (DigitalOcean typically uses 25060 for PostgreSQL)
DB_PORT=25060

# Database name (default is often 'defaultdb' on DigitalOcean)
DB_NAME=defaultdb

# Database username (often 'doadmin' on DigitalOcean)
DB_USER=doadmin

# Database password (get this from your DigitalOcean dashboard)
DB_PASSWORD=your-secure-password-here

# SSL mode (should be 'require' for DigitalOcean)
DB_SSLMODE=require

# ==============================================
# Application Configuration (Optional)
# ==============================================

# Flask configuration (only set to 'development' locally, never in production)
# FLASK_ENV=production

# Secret key for Flask sessions (generate a random string)
# FLASK_SECRET_KEY=generate-a-random-secret-key-here

# Enable debug mode (NEVER set to True in production)
# DEBUG=False

# ==============================================
# API Configuration (Optional)
# ==============================================

# Rate limiting (requests per minute)
# RATE_LIMIT=30

# Cache timeout in seconds
# CACHE_TIMEOUT=3600

# Maximum records per API request
# MAX_RECORDS_PER_REQUEST=100

# ==============================================
# Notes for Setup
# ==============================================
# 
# 1. Get your database credentials from DigitalOcean:
#    - Go to your database cluster in DigitalOcean
#    - Click "Connection Details"
#    - Use the "Connection parameters" view
#
# 2. Download the CA certificate:
#    - In DigitalOcean database dashboard
#    - Click "Download CA certificate"
#    - Save as 'ca-certificate.crt' in the api/ directory
#
# 3. Security reminders:
#    - Use strong, unique passwords
#    - Enable connection pooling if available
#    - Restrict database access by IP if possible
#    - Regular backups are recommended
#
# 4. Testing the connection:
#    You can test your database connection with:
#    python -c "from app import get_db_connection; conn = get_db_connection(); print('Connected!'); conn.close()"